/* automatically generated by rust-bindgen 0.68.1 */

pub const ctre_phoenix_ErrorCode_OK: ctre_phoenix_ErrorCode = 0;
#[doc = "!< No Error - Function executed as expected"]
pub const ctre_phoenix_ErrorCode_OKAY: ctre_phoenix_ErrorCode = 0;
pub const ctre_phoenix_ErrorCode_CAN_MSG_STALE: ctre_phoenix_ErrorCode = 1;
pub const ctre_phoenix_ErrorCode_CAN_TX_FULL: ctre_phoenix_ErrorCode = -1;
#[doc = "!< Could not transmit the CAN frame."]
pub const ctre_phoenix_ErrorCode_TxFailed: ctre_phoenix_ErrorCode = -1;
#[doc = "!< Caller passed an invalid param"]
pub const ctre_phoenix_ErrorCode_InvalidParamValue: ctre_phoenix_ErrorCode = -2;
pub const ctre_phoenix_ErrorCode_CAN_INVALID_PARAM: ctre_phoenix_ErrorCode = -2;
#[doc = "!< CAN frame has not been received within specified period of time."]
pub const ctre_phoenix_ErrorCode_RxTimeout: ctre_phoenix_ErrorCode = -3;
pub const ctre_phoenix_ErrorCode_CAN_MSG_NOT_FOUND: ctre_phoenix_ErrorCode = -3;
#[doc = "!< Not used."]
pub const ctre_phoenix_ErrorCode_TxTimeout: ctre_phoenix_ErrorCode = -4;
pub const ctre_phoenix_ErrorCode_CAN_NO_MORE_TX_JOBS: ctre_phoenix_ErrorCode = -4;
#[doc = "!< Specified CAN Id is invalid."]
pub const ctre_phoenix_ErrorCode_UnexpectedArbId: ctre_phoenix_ErrorCode = -5;
pub const ctre_phoenix_ErrorCode_CAN_NO_SESSIONS_AVAIL: ctre_phoenix_ErrorCode = -5;
#[doc = "!< Caller attempted to insert data into a buffer that is full."]
pub const ctre_phoenix_ErrorCode_BufferFull: ctre_phoenix_ErrorCode = 6;
pub const ctre_phoenix_ErrorCode_CAN_OVERFLOW: ctre_phoenix_ErrorCode = -6;
#[doc = "!< Sensor is not present"]
pub const ctre_phoenix_ErrorCode_SensorNotPresent: ctre_phoenix_ErrorCode = -7;
pub const ctre_phoenix_ErrorCode_FirmwareTooOld: ctre_phoenix_ErrorCode = -8;
pub const ctre_phoenix_ErrorCode_CouldNotChangePeriod: ctre_phoenix_ErrorCode = -9;
pub const ctre_phoenix_ErrorCode_BufferFailure: ctre_phoenix_ErrorCode = -10;
pub const ctre_phoenix_ErrorCode_FirwmwareNonFRC: ctre_phoenix_ErrorCode = -11;
#[doc = "!< User Specified General Error"]
pub const ctre_phoenix_ErrorCode_GeneralError: ctre_phoenix_ErrorCode = -100;
pub const ctre_phoenix_ErrorCode_GENERAL_ERROR: ctre_phoenix_ErrorCode = -100;
pub const ctre_phoenix_ErrorCode_SIG_NOT_UPDATED: ctre_phoenix_ErrorCode = -200;
#[doc = "!< Have not received an value response for signal."]
pub const ctre_phoenix_ErrorCode_SigNotUpdated: ctre_phoenix_ErrorCode = -200;
pub const ctre_phoenix_ErrorCode_NotAllPIDValuesUpdated: ctre_phoenix_ErrorCode = -201;
pub const ctre_phoenix_ErrorCode_GEN_PORT_ERROR: ctre_phoenix_ErrorCode = -300;
pub const ctre_phoenix_ErrorCode_PORT_MODULE_TYPE_MISMATCH: ctre_phoenix_ErrorCode = -301;
pub const ctre_phoenix_ErrorCode_GEN_MODULE_ERROR: ctre_phoenix_ErrorCode = -400;
pub const ctre_phoenix_ErrorCode_MODULE_NOT_INIT_SET_ERROR: ctre_phoenix_ErrorCode = -401;
pub const ctre_phoenix_ErrorCode_MODULE_NOT_INIT_GET_ERROR: ctre_phoenix_ErrorCode = -402;
pub const ctre_phoenix_ErrorCode_WheelRadiusTooSmall: ctre_phoenix_ErrorCode = -500;
pub const ctre_phoenix_ErrorCode_TicksPerRevZero: ctre_phoenix_ErrorCode = -501;
pub const ctre_phoenix_ErrorCode_DistanceBetweenWheelsTooSmall: ctre_phoenix_ErrorCode = -502;
pub const ctre_phoenix_ErrorCode_GainsAreNotSet: ctre_phoenix_ErrorCode = -503;
pub const ctre_phoenix_ErrorCode_WrongRemoteLimitSwitchSource: ctre_phoenix_ErrorCode = -504;
pub const ctre_phoenix_ErrorCode_DoubleVoltageCompensatingWPI: ctre_phoenix_ErrorCode = -505;
pub const ctre_phoenix_ErrorCode_CANdleAnimSlotOutOfBounds: ctre_phoenix_ErrorCode = -506;
pub const ctre_phoenix_ErrorCode_IncompatibleMode: ctre_phoenix_ErrorCode = -600;
#[doc = "!< Handle does not match stored map of handles"]
pub const ctre_phoenix_ErrorCode_InvalidHandle: ctre_phoenix_ErrorCode = -601;
pub const ctre_phoenix_ErrorCode_FeatureRequiresHigherFirm: ctre_phoenix_ErrorCode = -700;
pub const ctre_phoenix_ErrorCode_MotorControllerFeatureRequiresHigherFirm: ctre_phoenix_ErrorCode =
    -701;
pub const ctre_phoenix_ErrorCode_TalonFeatureRequiresHigherFirm: ctre_phoenix_ErrorCode = -701;
pub const ctre_phoenix_ErrorCode_ConfigFactoryDefaultRequiresHigherFirm: ctre_phoenix_ErrorCode =
    -702;
pub const ctre_phoenix_ErrorCode_ConfigMotionSCurveRequiresHigherFirm: ctre_phoenix_ErrorCode =
    -703;
pub const ctre_phoenix_ErrorCode_TalonFXFirmwarePreVBatDetect: ctre_phoenix_ErrorCode = -704;
pub const ctre_phoenix_ErrorCode_CANdleAnimationsRequireHigherFirm: ctre_phoenix_ErrorCode = -705;
pub const ctre_phoenix_ErrorCode_LibraryCouldNotBeLoaded: ctre_phoenix_ErrorCode = -800;
pub const ctre_phoenix_ErrorCode_MissingRoutineInLibrary: ctre_phoenix_ErrorCode = -801;
pub const ctre_phoenix_ErrorCode_ResourceNotAvailable: ctre_phoenix_ErrorCode = -802;
pub const ctre_phoenix_ErrorCode_MusicFileNotFound: ctre_phoenix_ErrorCode = -900;
pub const ctre_phoenix_ErrorCode_MusicFileWrongSize: ctre_phoenix_ErrorCode = -901;
pub const ctre_phoenix_ErrorCode_MusicFileTooNew: ctre_phoenix_ErrorCode = -902;
pub const ctre_phoenix_ErrorCode_MusicFileInvalid: ctre_phoenix_ErrorCode = -903;
pub const ctre_phoenix_ErrorCode_InvalidOrchestraAction: ctre_phoenix_ErrorCode = -904;
pub const ctre_phoenix_ErrorCode_MusicFileTooOld: ctre_phoenix_ErrorCode = -905;
pub const ctre_phoenix_ErrorCode_MusicInterrupted: ctre_phoenix_ErrorCode = -906;
pub const ctre_phoenix_ErrorCode_MusicNotSupported: ctre_phoenix_ErrorCode = -907;
pub const ctre_phoenix_ErrorCode_kInvalidInterface: ctre_phoenix_ErrorCode = -1000;
pub const ctre_phoenix_ErrorCode_kInvalidGuid: ctre_phoenix_ErrorCode = -1001;
pub const ctre_phoenix_ErrorCode_kInvalidClass: ctre_phoenix_ErrorCode = -1002;
pub const ctre_phoenix_ErrorCode_kInvalidProtocol: ctre_phoenix_ErrorCode = -1003;
pub const ctre_phoenix_ErrorCode_kInvalidPath: ctre_phoenix_ErrorCode = -1004;
pub const ctre_phoenix_ErrorCode_kGeneralWinUsbError: ctre_phoenix_ErrorCode = -1005;
pub const ctre_phoenix_ErrorCode_kFailedSetup: ctre_phoenix_ErrorCode = -1006;
pub const ctre_phoenix_ErrorCode_kListenFailed: ctre_phoenix_ErrorCode = -1007;
pub const ctre_phoenix_ErrorCode_kSendFailed: ctre_phoenix_ErrorCode = -1008;
pub const ctre_phoenix_ErrorCode_kReceiveFailed: ctre_phoenix_ErrorCode = -1009;
pub const ctre_phoenix_ErrorCode_kInvalidRespFormat: ctre_phoenix_ErrorCode = -1010;
pub const ctre_phoenix_ErrorCode_kWinUsbInitFailed: ctre_phoenix_ErrorCode = -1011;
pub const ctre_phoenix_ErrorCode_kWinUsbQueryFailed: ctre_phoenix_ErrorCode = -1012;
pub const ctre_phoenix_ErrorCode_kWinUsbGeneralError: ctre_phoenix_ErrorCode = -1013;
pub const ctre_phoenix_ErrorCode_kAccessDenied: ctre_phoenix_ErrorCode = -1014;
pub const ctre_phoenix_ErrorCode_kFirmwareInvalidResponse: ctre_phoenix_ErrorCode = -1015;
#[doc = "!< Special Code for \"isSensorPresent\""]
pub const ctre_phoenix_ErrorCode_PulseWidthSensorNotPresent: ctre_phoenix_ErrorCode = 10;
pub const ctre_phoenix_ErrorCode_GeneralWarning: ctre_phoenix_ErrorCode = 100;
pub const ctre_phoenix_ErrorCode_FeatureNotSupported: ctre_phoenix_ErrorCode = 101;
pub const ctre_phoenix_ErrorCode_NotImplemented: ctre_phoenix_ErrorCode = 102;
pub const ctre_phoenix_ErrorCode_FirmVersionCouldNotBeRetrieved: ctre_phoenix_ErrorCode = 103;
pub const ctre_phoenix_ErrorCode_FeaturesNotAvailableYet: ctre_phoenix_ErrorCode = 104;
pub const ctre_phoenix_ErrorCode_ControlModeNotValid: ctre_phoenix_ErrorCode = 105;
pub const ctre_phoenix_ErrorCode_ControlModeNotSupportedYet: ctre_phoenix_ErrorCode = 106;
pub const ctre_phoenix_ErrorCode_CascadedPIDNotSupporteYet: ctre_phoenix_ErrorCode = 107;
pub const ctre_phoenix_ErrorCode_AuxiliaryPIDNotSupportedYet: ctre_phoenix_ErrorCode = 107;
pub const ctre_phoenix_ErrorCode_RemoteSensorsNotSupportedYet: ctre_phoenix_ErrorCode = 108;
pub const ctre_phoenix_ErrorCode_MotProfFirmThreshold: ctre_phoenix_ErrorCode = 109;
pub const ctre_phoenix_ErrorCode_MotProfFirmThreshold2: ctre_phoenix_ErrorCode = 110;
pub const ctre_phoenix_ErrorCode_SimDeviceNotFound: ctre_phoenix_ErrorCode = 200;
pub const ctre_phoenix_ErrorCode_SimPhysicsTypeNotSupported: ctre_phoenix_ErrorCode = 201;
pub const ctre_phoenix_ErrorCode_SimDeviceAlreadyExists: ctre_phoenix_ErrorCode = 202;
pub type ctre_phoenix_ErrorCode = i32;
#[doc = " Percent output [-1,1]"]
pub const ctre_phoenix_motorcontrol_ControlMode_PercentOutput:
    ctre_phoenix_motorcontrol_ControlMode = 0;
#[doc = " Position closed loop"]
pub const ctre_phoenix_motorcontrol_ControlMode_Position: ctre_phoenix_motorcontrol_ControlMode = 1;
#[doc = " Velocity closed loop"]
pub const ctre_phoenix_motorcontrol_ControlMode_Velocity: ctre_phoenix_motorcontrol_ControlMode = 2;
#[doc = " Input current closed loop"]
pub const ctre_phoenix_motorcontrol_ControlMode_Current: ctre_phoenix_motorcontrol_ControlMode = 3;
#[doc = " Follow other motor controller"]
pub const ctre_phoenix_motorcontrol_ControlMode_Follower: ctre_phoenix_motorcontrol_ControlMode = 5;
#[doc = " Motion Profile"]
pub const ctre_phoenix_motorcontrol_ControlMode_MotionProfile:
    ctre_phoenix_motorcontrol_ControlMode = 6;
#[doc = " Motion Magic"]
pub const ctre_phoenix_motorcontrol_ControlMode_MotionMagic: ctre_phoenix_motorcontrol_ControlMode =
    7;
#[doc = " Motion Profile with auxiliary output"]
pub const ctre_phoenix_motorcontrol_ControlMode_MotionProfileArc:
    ctre_phoenix_motorcontrol_ControlMode = 10;
#[doc = " Plays a single tone.  Frequency (hz) is passed into set."]
pub const ctre_phoenix_motorcontrol_ControlMode_MusicTone: ctre_phoenix_motorcontrol_ControlMode =
    13;
#[doc = " Disable Motor Controller"]
pub const ctre_phoenix_motorcontrol_ControlMode_Disabled: ctre_phoenix_motorcontrol_ControlMode =
    15;
#[doc = " Choose the control mode for a motor controller.\n Consult product specific documentation to determine what is available/supported."]
pub type ctre_phoenix_motorcontrol_ControlMode = ::std::os::raw::c_int;
#[doc = "!< Trapezoidal Commutation"]
pub const ctre_phoenix_motorcontrol_MotorCommutation_Trapezoidal:
    ctre_phoenix_motorcontrol_MotorCommutation = 0;
#[doc = " Choose the type of motor commutation.  This is for products that support selectable commutation strategies.\n\n @deprecated This device's Phoenix 5 API is deprecated for removal in the\n 2025 season. Users should update to Phoenix 6 firmware and migrate to the\n Phoenix 6 API. A migration guide is available at\n https://v6.docs.ctr-electronics.com/en/stable/docs/migration/migration-guide/index.html.\n\n If the Phoenix 5 API must be used for this device, the device must have 22.X\n firmware. This firmware is available in Tuner X after selecting Phoenix 5 in\n the firmware year dropdown."]
pub type ctre_phoenix_motorcontrol_MotorCommutation = ::std::os::raw::c_int;
#[doc = " Express the absolute position as an unsigned value.\n E.g. [0,+1) rotations or [0,360) deg."]
pub const ctre_phoenix_sensors_AbsoluteSensorRange_Unsigned_0_to_360:
    ctre_phoenix_sensors_AbsoluteSensorRange = 0;
#[doc = " Express the absolute position as an signed value.\n E.g. [-0.5,+0.5) rotations or [-180,+180) deg."]
pub const ctre_phoenix_sensors_AbsoluteSensorRange_Signed_PlusMinus180:
    ctre_phoenix_sensors_AbsoluteSensorRange = 1;
#[doc = " Enum for how to range the absolute sensor position.\n\n @deprecated This device's Phoenix 5 API is deprecated for removal in the\n 2025 season. Users should update to Phoenix 6 firmware and migrate to the\n Phoenix 6 API. A migration guide is available at\n https://v6.docs.ctr-electronics.com/en/stable/docs/migration/migration-guide/index.html.\n\n If the Phoenix 5 API must be used for this device, the device must have 22.X\n firmware. This firmware is available in Tuner X after selecting Phoenix 5 in\n the firmware year dropdown."]
pub type ctre_phoenix_sensors_AbsoluteSensorRange = ::std::os::raw::c_uint;
#[doc = " On boot up, set position to zero."]
pub const ctre_phoenix_sensors_SensorInitializationStrategy_BootToZero:
    ctre_phoenix_sensors_SensorInitializationStrategy = 0;
#[doc = " On boot up, sync to the Absolute Position signal.  The Absolute position signal will be signed according to the selected Absolute Sensor Range."]
pub const ctre_phoenix_sensors_SensorInitializationStrategy_BootToAbsolutePosition:
    ctre_phoenix_sensors_SensorInitializationStrategy = 1;
#[doc = " Enum for how CANCoder should initialize its position register on boot.\n\n @deprecated This device's Phoenix 5 API is deprecated for removal in the\n 2025 season. Users should update to Phoenix 6 firmware and migrate to the\n Phoenix 6 API. A migration guide is available at\n https://v6.docs.ctr-electronics.com/en/stable/docs/migration/migration-guide/index.html.\n\n If the Phoenix 5 API must be used for this device, the device must have 22.X\n firmware. This firmware is available in Tuner X after selecting Phoenix 5 in\n the firmware year dropdown."]
pub type ctre_phoenix_sensors_SensorInitializationStrategy = ::std::os::raw::c_uint;
extern "C" {
    pub fn c_MotController_Create1(baseArbId: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn c_MotController_Create2(
        deviceID: ::std::os::raw::c_int,
        model: *const ::std::os::raw::c_char,
        canbus: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn c_MotController_DestroyAll();
}
extern "C" {
    pub fn c_MotController_Destroy(handle: *mut ::std::os::raw::c_void) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetAppliedControlMode(
        handle: *mut ::std::os::raw::c_void,
        controlMode: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetDeviceNumber(
        handle: *mut ::std::os::raw::c_void,
        deviceNumber: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetDescription(
        handle: *mut ::std::os::raw::c_void,
        toFill: *mut ::std::os::raw::c_char,
        toFillByteSz: ::std::os::raw::c_int,
        numBytesFilled: *mut usize,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetBaseID(
        handle: *mut ::std::os::raw::c_void,
        baseArbId: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetDemand(
        handle: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        demand0: ::std::os::raw::c_int,
        demand1: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_Set_4(
        handle: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        demand0: f64,
        demand1: f64,
        demand1Type: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetNeutralMode(
        handle: *mut ::std::os::raw::c_void,
        neutralMode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn c_MotController_SetSensorPhase(handle: *mut ::std::os::raw::c_void, PhaseSensor: bool);
}
extern "C" {
    pub fn c_MotController_SetInverted(handle: *mut ::std::os::raw::c_void, invert: bool);
}
extern "C" {
    pub fn c_MotController_SetInverted_2(
        handle: *mut ::std::os::raw::c_void,
        invertType: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn c_MotController_ConfigFactoryDefault(
        handle: *mut ::std::os::raw::c_void,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigOpenLoopRamp(
        handle: *mut ::std::os::raw::c_void,
        secondsFromNeutralToFull: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClosedLoopRamp(
        handle: *mut ::std::os::raw::c_void,
        secondsFromNeutralToFull: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPeakOutputForward(
        handle: *mut ::std::os::raw::c_void,
        percentOut: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPeakOutputReverse(
        handle: *mut ::std::os::raw::c_void,
        percentOut: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigNominalOutputForward(
        handle: *mut ::std::os::raw::c_void,
        percentOut: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigNominalOutputReverse(
        handle: *mut ::std::os::raw::c_void,
        percentOut: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigNeutralDeadband(
        handle: *mut ::std::os::raw::c_void,
        percentDeadband: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigVoltageCompSaturation(
        handle: *mut ::std::os::raw::c_void,
        voltage: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigVoltageMeasurementFilter(
        handle: *mut ::std::os::raw::c_void,
        filterWindowSamples: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_EnableVoltageCompensation(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    );
}
extern "C" {
    pub fn c_MotController_GetInverted(
        handle: *mut ::std::os::raw::c_void,
        invert: *mut bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetBusVoltage(
        handle: *mut ::std::os::raw::c_void,
        voltage: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetMotorOutputPercent(
        handle: *mut ::std::os::raw::c_void,
        percentOutput: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetOutputCurrent(
        handle: *mut ::std::os::raw::c_void,
        current: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetSupplyCurrent(
        handle: *mut ::std::os::raw::c_void,
        current: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetStatorCurrent(
        handle: *mut ::std::os::raw::c_void,
        current: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetTemperature(
        handle: *mut ::std::os::raw::c_void,
        temperature: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSelectedFeedbackSensor(
        handle: *mut ::std::os::raw::c_void,
        feedbackDevice: ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSelectedFeedbackCoefficient(
        handle: *mut ::std::os::raw::c_void,
        coefficient: f64,
        pidIdx: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigRemoteFeedbackFilter(
        handle: *mut ::std::os::raw::c_void,
        deviceID: ::std::os::raw::c_int,
        remoteSensorSource: ::std::os::raw::c_int,
        remoteOrdinal: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSensorTerm(
        handle: *mut ::std::os::raw::c_void,
        sensorTerm: ::std::os::raw::c_int,
        feedbackDevice: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetSelectedSensorPosition(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetSelectedSensorVelocity(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetSelectedSensorPosition(
        handle: *mut ::std::os::raw::c_void,
        sensorPos: ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetControlFramePeriod(
        handle: *mut ::std::os::raw::c_void,
        frame: ::std::os::raw::c_int,
        periodMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetStatusFramePeriod(
        handle: *mut ::std::os::raw::c_void,
        frame: ::std::os::raw::c_int,
        periodMs: u8,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetStatusFramePeriod(
        handle: *mut ::std::os::raw::c_void,
        frame: ::std::os::raw::c_int,
        periodMs: *mut ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigVelocityMeasurementPeriod(
        handle: *mut ::std::os::raw::c_void,
        period: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigVelocityMeasurementWindow(
        handle: *mut ::std::os::raw::c_void,
        windowSize: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigForwardLimitSwitchSource(
        handle: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        normalOpenOrClose: ::std::os::raw::c_int,
        deviceID: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigReverseLimitSwitchSource(
        handle: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        normalOpenOrClose: ::std::os::raw::c_int,
        deviceID: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_OverrideLimitSwitchesEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    );
}
extern "C" {
    pub fn c_MotController_ConfigForwardSoftLimitThreshold(
        handle: *mut ::std::os::raw::c_void,
        forwardSensorLimit: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigReverseSoftLimitThreshold(
        handle: *mut ::std::os::raw::c_void,
        reverseSensorLimit: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigForwardSoftLimitEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigReverseSoftLimitEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_OverrideSoftLimitsEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    );
}
extern "C" {
    pub fn c_MotController_Config_kP(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        value: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_Config_kI(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        value: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_Config_kD(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        value: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_Config_kF(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        value: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_Config_IntegralZone(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        izone: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigAllowableClosedloopError(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        allowableClosedLoopError: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMaxIntegralAccumulator(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        iaccum: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClosedLoopPeakOutput(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        percentOut: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClosedLoopPeriod(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        loopTimeMs: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetIntegralAccumulator(
        handle: *mut ::std::os::raw::c_void,
        iaccum: f64,
        pidIdx: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetClosedLoopError(
        handle: *mut ::std::os::raw::c_void,
        closedLoopError: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetIntegralAccumulator(
        handle: *mut ::std::os::raw::c_void,
        iaccum: *mut f64,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetErrorDerivative(
        handle: *mut ::std::os::raw::c_void,
        derror: *mut f64,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SelectProfileSlot(
        handle: *mut ::std::os::raw::c_void,
        slotIdx: ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryPosition(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryVelocity(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryHeading(
        handle: *mut ::std::os::raw::c_void,
        param: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryPosition_3(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryVelocity_3(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryArbFeedFwd_3(
        handle: *mut ::std::os::raw::c_void,
        param: *mut f64,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryAll(
        handle: *mut ::std::os::raw::c_void,
        vel: *mut ::std::os::raw::c_int,
        pos: *mut ::std::os::raw::c_int,
        heading: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetActiveTrajectoryAll_5(
        handle: *mut ::std::os::raw::c_void,
        vel: *mut ::std::os::raw::c_int,
        pos: *mut ::std::os::raw::c_int,
        arbFeedFwd: *mut f64,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotionCruiseVelocity(
        handle: *mut ::std::os::raw::c_void,
        sensorUnitsPer100ms: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotionAcceleration(
        handle: *mut ::std::os::raw::c_void,
        sensorUnitsPer100msPerSec: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotionSCurveStrength(
        handle: *mut ::std::os::raw::c_void,
        curveStrength: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ClearMotionProfileTrajectories(
        handle: *mut ::std::os::raw::c_void,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetMotionProfileTopLevelBufferCount(
        handle: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_PushMotionProfileTrajectory(
        handle: *mut ::std::os::raw::c_void,
        position: f64,
        velocity: f64,
        headingDeg: f64,
        profileSlotSelect: ::std::os::raw::c_int,
        isLastPoint: bool,
        zeroPos: bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_PushMotionProfileTrajectory_2(
        handle: *mut ::std::os::raw::c_void,
        position: f64,
        velocity: f64,
        headingDeg: f64,
        profileSlotSelect0: ::std::os::raw::c_int,
        profileSlotSelect1: ::std::os::raw::c_int,
        isLastPoint: bool,
        zeroPos: bool,
        durationMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_PushMotionProfileTrajectory_3(
        handle: *mut ::std::os::raw::c_void,
        position: f64,
        velocity: f64,
        arbFeedFwd: f64,
        auxiliaryPos: f64,
        auxiliaryVel: f64,
        auxiliaryArbFeedFwd: f64,
        profileSlotSelect0: u32,
        profileSlotSelect1: u32,
        isLastPoint: bool,
        zeroPos0: bool,
        timeDur: u32,
        useAuxPID: bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_StartMotionProfile(
        handle: *mut ::std::os::raw::c_void,
        streamHandle: *mut ::std::os::raw::c_void,
        minBufferedPts: u32,
        controlMode: ctre_phoenix_motorcontrol_ControlMode,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_IsMotionProfileFinished(
        handle: *mut ::std::os::raw::c_void,
        value: *mut bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_IsMotionProfileTopLevelBufferFull(
        handle: *mut ::std::os::raw::c_void,
        value: *mut bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ProcessMotionProfileBuffer(
        handle: *mut ::std::os::raw::c_void,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetMotionProfileStatus(
        handle: *mut ::std::os::raw::c_void,
        topBufferRem: *mut usize,
        topBufferCnt: *mut usize,
        btmBufferCnt: *mut ::std::os::raw::c_int,
        hasUnderrun: *mut bool,
        isUnderrun: *mut bool,
        activePointValid: *mut bool,
        isLast: *mut bool,
        profileSlotSelect: *mut ::std::os::raw::c_int,
        outputEnable: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetMotionProfileStatus_2(
        handle: *mut ::std::os::raw::c_void,
        topBufferRem: *mut usize,
        topBufferCnt: *mut usize,
        btmBufferCnt: *mut ::std::os::raw::c_int,
        hasUnderrun: *mut bool,
        isUnderrun: *mut bool,
        activePointValid: *mut bool,
        isLast: *mut bool,
        profileSlotSelect: *mut ::std::os::raw::c_int,
        outputEnable: *mut ::std::os::raw::c_int,
        timeDurMs: *mut ::std::os::raw::c_int,
        profileSlotSelect1: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ClearMotionProfileHasUnderrun(
        handle: *mut ::std::os::raw::c_void,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ChangeMotionControlFramePeriod(
        handle: *mut ::std::os::raw::c_void,
        periodMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotionProfileTrajectoryPeriod(
        handle: *mut ::std::os::raw::c_void,
        durationMs: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotionProfileTrajectoryInterpolationEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigFeedbackNotContinuous(
        handle: *mut ::std::os::raw::c_void,
        feedbackNotContinuous: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigRemoteSensorClosedLoopDisableNeutralOnLOS(
        handle: *mut ::std::os::raw::c_void,
        remoteSensorClosedLoopDisableNeutralOnLOS: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClearPositionOnLimitF(
        handle: *mut ::std::os::raw::c_void,
        clearPositionOnLimitF: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClearPositionOnLimitR(
        handle: *mut ::std::os::raw::c_void,
        clearPositionOnLimitR: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigClearPositionOnQuadIdx(
        handle: *mut ::std::os::raw::c_void,
        clearPositionOnQuadIdx: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigLimitSwitchDisableNeutralOnLOS(
        handle: *mut ::std::os::raw::c_void,
        limitSwitchDisableNeutralOnLOS: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSoftLimitDisableNeutralOnLOS(
        handle: *mut ::std::os::raw::c_void,
        softLimitDisableNeutralOnLOS: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPulseWidthPeriod_EdgesPerRot(
        handle: *mut ::std::os::raw::c_void,
        pulseWidthPeriod_EdgesPerRot: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPulseWidthPeriod_FilterWindowSz(
        handle: *mut ::std::os::raw::c_void,
        pulseWidthPeriod_FilterWindowSz: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetLastError(
        handle: *mut ::std::os::raw::c_void,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetFirmwareVersion(
        handle: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_HasResetOccurred(
        handle: *mut ::std::os::raw::c_void,
        arg1: *mut bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSetCustomParam(
        handle: *mut ::std::os::raw::c_void,
        newValue: ::std::os::raw::c_int,
        paramIndex: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetCustomParam(
        handle: *mut ::std::os::raw::c_void,
        readValue: *mut ::std::os::raw::c_int,
        paramIndex: ::std::os::raw::c_int,
        timoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSetParameter(
        handle: *mut ::std::os::raw::c_void,
        param: ::std::os::raw::c_int,
        value: f64,
        subValue: u8,
        ordinal: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetParameter(
        handle: *mut ::std::os::raw::c_void,
        param: ::std::os::raw::c_int,
        value: *mut f64,
        ordinal: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetParameter_6(
        handle: *mut ::std::os::raw::c_void,
        param: i32,
        valueToSend: i32,
        valueRecieved: *mut i32,
        subValue: *mut u8,
        ordinal: i32,
        timeoutMs: i32,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPeakCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        amps: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigPeakCurrentDuration(
        handle: *mut ::std::os::raw::c_void,
        milliseconds: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigContinuousCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        amps: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_EnableCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetLastError(
        handle: *mut ::std::os::raw::c_void,
        error: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetAnalogIn(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetAnalogPosition(
        handle: *mut ::std::os::raw::c_void,
        newPosition: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetAnalogInRaw(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetAnalogInVel(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetQuadraturePosition(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetQuadraturePosition(
        handle: *mut ::std::os::raw::c_void,
        newPosition: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetQuadratureVelocity(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPulseWidthPosition(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetPulseWidthPosition(
        handle: *mut ::std::os::raw::c_void,
        newPosition: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPulseWidthVelocity(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPulseWidthRiseToFallUs(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPulseWidthRiseToRiseUs(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPinStateQuadA(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPinStateQuadB(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPinStateQuadIdx(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_IsFwdLimitSwitchClosed(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_IsRevLimitSwitchClosed(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetFaults(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetStickyFaults(
        handle: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ClearStickyFaults(
        handle: *mut ::std::os::raw::c_void,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SelectDemandType(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetMPEOutput(
        handle: *mut ::std::os::raw::c_void,
        MpeOutput: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_EnableHeadingHold(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetAnalogInAll(
        handle: *mut ::std::os::raw::c_void,
        withOv: *mut ::std::os::raw::c_int,
        raw: *mut ::std::os::raw::c_int,
        vel: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetQuadratureSensor(
        handle: *mut ::std::os::raw::c_void,
        pos: *mut ::std::os::raw::c_int,
        vel: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetPulseWidthAll(
        handle: *mut ::std::os::raw::c_void,
        pos: *mut ::std::os::raw::c_int,
        vel: *mut ::std::os::raw::c_int,
        riseToRiseUs: *mut ::std::os::raw::c_int,
        riseToFallUs: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetQuadPinStates(
        handle: *mut ::std::os::raw::c_void,
        quadA: *mut ::std::os::raw::c_int,
        quadB: *mut ::std::os::raw::c_int,
        quadIdx: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetLimitSwitchState(
        handle: *mut ::std::os::raw::c_void,
        isFwdClosed: *mut ::std::os::raw::c_int,
        isRevClosed: *mut ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetClosedLoopTarget(
        handle: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_int,
        pidIdx: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigMotorCommutation(
        handle: *mut ::std::os::raw::c_void,
        motorCommutation: ctre_phoenix_motorcontrol_MotorCommutation,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetMotorCommutation(
        handle: *mut ::std::os::raw::c_void,
        motorCommutation: *mut ctre_phoenix_motorcontrol_MotorCommutation,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSupplyCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        params: *const f64,
        paramCnt: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigStatorCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        params: *const f64,
        paramCnt: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigSupplyCurrentLimitEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigStatorCurrentLimitEnable(
        handle: *mut ::std::os::raw::c_void,
        enable: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetSupplyCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        toFill: *mut f64,
        fillCnt: *mut ::std::os::raw::c_int,
        fillCapacity: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigGetStatorCurrentLimit(
        handle: *mut ::std::os::raw::c_void,
        toFill: *mut f64,
        fillCnt: *mut ::std::os::raw::c_int,
        fillCapacity: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetIntegratedSensorPosition(
        handle: *mut ::std::os::raw::c_void,
        newpos: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_SetIntegratedSensorPositionToAbsolute(
        handle: *mut ::std::os::raw::c_void,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_GetIntegratedSensor(
        handle: *mut ::std::os::raw::c_void,
        pos: *mut f64,
        absPos: *mut f64,
        vel: *mut f64,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigIntegratedSensorAbsoluteRange(
        handle: *mut ::std::os::raw::c_void,
        absoluteSensorRange: ctre_phoenix_sensors_AbsoluteSensorRange,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigIntegratedSensorOffset(
        handle: *mut ::std::os::raw::c_void,
        offsetDegrees: f64,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
extern "C" {
    pub fn c_MotController_ConfigIntegratedSensorInitializationStrategy(
        handle: *mut ::std::os::raw::c_void,
        initializationStrategy: ctre_phoenix_sensors_SensorInitializationStrategy,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ctre_phoenix_ErrorCode;
}
