searchState.loadedDescShard("diatomic_waker", 0, "Async, fast synchronization primitives for task wakeup.\nA primitive that can send or await notifications.\nA future that can be <code>await</code>ed until a predicate is …\nAn owned object that can await notifications from one or …\nA non-owned object that can await notifications from one …\nAn owned object that can send notifications to a <code>WakeSink</code>.\nA non-owned object that can send notifications to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new sink.\nCreates a new <code>DiatomicWaker</code>.\nNotifies the sink if a waker is registered.\nNotifies the sink if a waker is registered.\nSends a notification if a waker is registered.\nPrimitives for task wakeup.\nRegisters a new waker.\nRegisters a new waker.\nRegisters a new waker.\nReturns a sink with a lifetime bound to this <code>DiatomicWaker</code>.\nCreates an owned source.\nCreates a new <code>WakeSourceRef</code> associated to this sink with …\nUnregisters the waker.\nUnregisters the waker.\nUnregisters the waker.\nReturns a future that can be <code>await</code>ed until the provided …\nReturns a future that can be <code>await</code>ed until the provided …\nReturns a future that can be <code>await</code>ed until the provided …")