searchState.loadedDescShard("hal_sys", 0, "The acceptable accelerometer ranges.\nAllocates a DO PWM Generator.\nThe type of analog trigger to trigger on.\nThe CAN device type.\nAccelerometer.\nBroadcast.\nFirmware update.\nGear tooth sensor.\nGyro sensor.\nIO breakout.\nMiscellaneous.\nMotor controller.\nPneumatics.\nPower distribution.\nRelay controller.\nRobot controller.\nUltrasonic sensor.\nThe CAN manufacturer ID.\nAndyMark.\nBroadcast.\nCross the Road Electronics.\nCopperforge.\nDEKA Research and Development Corp.\nGrapple.\nKauai Labs.\nLuminary Micro.\nMindSensors.\nNational Instruments.\nPlaying With Fusion.\nREV robotics.\nRedux Robotics.\nStudica.\nTeam use.\nTheThriftyBot.\nVivid-Hosting.\nStorage for CAN Stream Messages.\nCloses a CAN stream.\nGets CAN status information.\nOpens a CAN stream.\nReads a CAN stream message.\nReceives a CAN message.\nSends a CAN message.\nCalibrates the analog gyro.\nCancels the next notifier alarm.\nChecks that the analog output channel number is valid. …\nChecks that the analog module number is valid.\nChecks that the analog output channel number is valid.\nChecks if a solenoid channel number is valid.\nChecks if a DIO channel is valid.\nChecks if a pwm channel is valid.\nChecks if a relay channel is valid.\nFrees an analog trigger.\nFrees a CAN device\nFrees an interrupt.\nCleans a notifier.\nClears all sticky faults on this device.\nDisables the down counting source to the counter.\nDisables the up counting source to the counter.\nClears the receive buffer of the serial port.\nCloses an I2C port\nCloses the SPI port.\nCloses a serial port.\nConfigure the Auto SPI Stall time between reads.\nThe counter mode.\nCreates a simulated device.\nCreates a value on a simulated device.\nCreates an enumerated value on a simulated device.\nCreates an enumerated value on a simulated device with …\nDisables a termination character for reads.\nSets the termination character that terminates a read.\nThe encoding scaling of the encoder.\nThe type of index pulse for the encoder.\nCauses HAL_RunMain() to exit.\nGiven an 32 bit FPGA time, expand it to the nearest likely …\nFire a single solenoid shot.\nFlushes the serial write buffer out to the port.\nImmediately forces an SPI read to happen.\nFrees an analog gyro.\nFrees an analog input port.\nFrees an analog output port.\nFrees a PCM handle.\nFrees a counter.\nFrees a DIO port.\nFrees the resource associated with a DO PWM generator.\nFrees an encoder.\nFrees a joystick name received with HAL_GetJoystickName\nFrees a PWM port.\nFrees a relay port.\nFrees an SPI automatic accumulator.\nFrees a simulated device.\nGets the x-axis acceleration.\nGets the y-axis acceleration.\nGets the z-axis acceleration.\nRead the number of accumulated values.\nRead the accumulated value and the number of accumulated …\nRead the accumulated value.\nGets the current alliance station ID.\nGets the number of averaging bits.\nGets a sample from the output of the oversample and …\nGets a scaled sample from the output of the oversample and …\nGets the gyro angle in degrees.\nGets the calibrated gyro center.\nGets the calibrated gyro offset.\nGets the gyro rate in degrees/second.\nGets the factory scaling least significant bit weight …\nGets the factory scaling offset constant. The offset …\nGets the current analog output value.\nGets the number of oversample bits.\nGets the current sample rate.\nGet the FPGA index for the AnlogTrigger.\nReturns the InWindow output of the analog trigger.\nGets the state of the analog trigger output.\nReturns the TriggerState output of the analog trigger.\nGets a sample straight from the channel on this module.\nGet the analog voltage from a raw value.\nGets a scaled sample straight from the channel on this …\nConverts a voltage to a raw value for a specified channel.\nGets if the system is in a browned out state.\nGet the current brownout voltage setting.\nReads the current value of the millisecond-resolution …\nGet the current CPU temperature in degrees Celsius\nGet whether the PCM closed loop control is enabled.\nGet whether compressor is turned on.\nReturns the current drawn by the compressor.\nReturn whether the compressor current is currently too …\nReturns whether the compressor current has been too high …\nReturns whether the compressor is currently disconnected.\nReturns whether the compressor has been disconnected since …\nReturns whether the compressor is currently shorted.\nReturns whether the compressor has been shorted since …\nReturns the state of the pressure switch.\nGet a bitmask of disabled solenoids.\nReturns whether the solenoid is currently reporting a …\nReturns whether the solenoid has reported a voltage fault …\nGets a bitmask of solenoid values.\nReturns the comments from the roboRIO web interface.\nGets the current control word of the driver station.\nReads the current counter value.\nGets the last direction the counter value changed.\nGets the Period of the most recent count.\nGets the Samples to Average which specifies the number of …\nDetermines if the clock is stopped.\nGets the thread priority for the current thread.\nReads a digital value from a DIO channel.\nReads the direction of a DIO channel.\nGets the current counts of the encoder after encoding type …\nGets the decoding scale factor of the encoder.\nGets the last direction the encoder value changed.\nGets the current distance traveled by the encoder.\nGets the user set distance per pulse of the encoder.\nGets the encoder scale value.\nGets the encoding type of the encoder.\nGets the FPGA index of the encoder.\nGets the Period of the most recent count.\nGets the current rate of the encoder.\nGets the raw counts of the encoder.\nGets the current samples to average value.\nDetermines if the clock is stopped.\nGets the error message for a specific status code.\nGets the state of the “USER” button on the roboRIO.\nReturns the FPGA Revision number.\nReads the microsecond-resolution timer on the FPGA.\nReturns the FPGA Version number.\nGets the filter period for the specified filter index.\nReads the filter index from the FPGA.\nGets the axes of a specific joystick.\nGets the type of a specific joystick axis.\nGets the buttons of a specific joystick.\nRetrieves the Joystick Descriptor for particular slot.\nGets whether a specific joystick is considered to be an …\nGets the name of a joystick.\nGets the POVs of a specific joystick.\nGets the type of joystick connected.\nGets the last error set on this thread, or the message for …\nGets info about a specific match.\nReturn the approximate match time. The FMS does not send …\nGets the number of analog accumulators in the current …\nGets the number of addressable LED generators in the …\nGets the number of analog inputs in the current system.\nGets the number of analog outputs in the current system.\nGets the number of analog triggers in the current system.\nGets the number of PCM modules in the current system.\nGets the number of PDP channels in the current system.\nGets the number of PDP modules in the current system.\nGets the number of solenoid channels in the current system.\nGets the number of counters in the current system.\nGets the number of digital channels in the current system.\nGets the number of digital headers in the current system.\nGets the number of digital IO PWM outputs in the current …\nGets the number of duty cycle inputs in the current system.\nGets the number of quadrature encoders in the current …\nGets the number of interrupts in the current system.\nGets the number of PWM channels in the current system.\nGets the number of PWM headers in the current system.\nGets the number of PDH channels in the current system.\nGets the number of PDH modules in the current system.\nGets the number of PH channels in the current system.\nGets the number of PH modules in the current system.\nGets the number of relay channels in the current system.\nGets the number of relay headers in the current system.\nGets if outputs are enabled by the control system.\nGets the pwm configuration settings for the PWM channel.\nGets the pwm starting cycle time.\nGets the current eliminate deadband value.\nGets the loop timing of the PWM system.\nGets a position value from a PWM channel.\nGets the current microsecond pulse time from a PWM channel.\nGets a scaled value from a PWM channel.\nGets a port handle for a specific channel.\nGets a port handle for a specific channel and module.\nGets the current state of the Robot Signal Light (RSL).\nGet the state of the “Radio” LED.\nGets the current state of the relay channel.\nReturns the runtime type of the HAL.\nGets the count of how many SPI accumulations have been …\nGets the stored handle for a SPI port.\nGets the SPI Mode.\nGets the number of bytes currently in the read buffer.\nGets the raw serial port file descriptor from a handle.\nReturns the roboRIO serial number.\nGet the name of a simulated device\nGets a simulated value.\nGets if the system outputs are currently active.\nGets the number of FPGA system clock ticks per microsecond.\nGets if the system time is valid.\nReturns the team number configured for the robot …\nGets the thread priority for the specified thread.\nGets the active state of the 3V3 rail.\nGets the active state of the 5V rail.\nGets the active state of the 6V rail.\nGets the 3V3 rail current.\nGets the 5V rail current.\nGets the 6V rail current.\nGets the fault count for the 3V3 rail.\nGets the fault count for the 5V rail.\nGets the fault count for the 6V rail.\nGets the 3V3 rail voltage.\nGets the 5V rail voltage.\nGets the 6V rail voltage.\nGets the roboRIO input current.\nGets the roboRIO input voltage.\nReturns true if HAL_SetMain() has been called.\n@defgroup hal_i2c I2C Functions @ingroup hal_capi @{\nInitialize the accumulator.\nInitializes the SPI automatic accumulator.\nCall this to start up HAL. This is required for robot …\nInitializes an analog gyro.\nInitializes the analog input port using the given port …\nInitializes the analog output port using the given port …\nInitializes an analog trigger.\nInitializes an analog trigger with a Duty Cycle input\nInitializes a CAN device.\nInitializes a PCM.\nInitializes a counter.\nCreates a new instance of a digital port.\nInitializes an encoder.\nInitializes the I2C port.\nInitializes an interrupt.\nInitializes a notifier.\nInitializes a PWM port.\nInitializes a relay.\nInitializes the SPI port. Opens the port if necessary and …\nInitializes a serial port.\nInitializes a serial port with a direct name.\nIs the channel attached to an accumulator.\nChecks if any DIO line is currently generating a pulse.\nChecks a DIO line to see if it is currently generating a …\nForces a PWM signal to go to 0 temporarily.\nSets the autonomous enabled flag in the DS.\nSets the disabled flag in the DS.\nSets the program starting flag in the DS.\nSets the teleoperated enabled flag in the DS.\nSets the test mode flag in the DS.\nGenerates a single digital pulse.\nGenerates a single digital pulse on multiple channels.\nReads a CAN packet. The will continuously return the last …\nReads a new CAN packet.\nReads a CAN packet. The will return the last packet …\nExecutes a read transaction with the device.\nReturns the timestamp for the falling interrupt that …\nReturns the timestamp for the rising interrupt that …\nExecutes a read from the device.\nReads data received by the SPI accumulator.  Each received …\nReads data from the serial port.\nRefresh the DS control word.\nReleases a waiting interrupt.\nReports a hardware usage to the HAL.\nRequests interrupts on a specific digital source.\nResets the accumulator to the initial value.\nResets the analog gyro value to 0.\nResets the Counter to zero.\nReads the current encoder value.\nResets a simulated double or integral value to 0. Has no …\nRuns the main function provided to HAL_SetMain().\n@defgroup hal_capi WPILib HAL API Hardware Abstraction …\n@defgroup hal_spi SPI Functions @ingroup hal_capi @{\nSends a line to the driver station console.\nSends an error to the driver station.\n@defgroup hal_serialport Serial Port Functions @ingroup …\nSets the accelerometer to active or standby mode.\nSets the range of values that can be measured (either 2, …\nSet the center value of the accumulator.\nSet the accumulator’s deadband.\nSets the number of averaging bits.\nSets the deadband of the analog gyro.\nSets the analog gyro parameters to the specified values.\nSets the analog gyro volts per degrees per second scaling.\nIndicates the analog input is used by a simulated device.\nSets an analog output value.\nSets the number of oversample bits.\nSets the sample rate.\nConfigures the analog trigger to use the averaged vs. raw …\nConfigures the analog trigger to use a filtered value.\nSets the upper and lower limits of the analog trigger.\nSets the raw ADC upper and lower limits of the analog …\nSets the upper and lower limits of the analog trigger.\nSet the voltage the roboRIO will brownout and disable all …\nEnables the compressor closed loop control using the …\nSet the duration for a single solenoid shot.\nSets solenoids on a pneumatics module.\nSets the average sample size of a counter.\nSets the source object that causes the counter to count …\nSets the down source to either detect rising edges or …\nSets directional counting mode on this counter.\nSets the maximum period where the device is still …\nConfigures the counter to count in up or down based on the …\nSets the Counter to return reversed sensing on the …\nSets the Samples to Average which specifies the number of …\nSets Semi-period mode on this counter.\nSets standard up / down counting mode on this counter.\nSets the source object that causes the counter to count up.\nSets the up source to either detect rising edges or …\nSelects whether you want to continue updating the event …\nSets the thread priority for the current thread.\nWrites a digital value to a DIO channel.\nSets the direction of a DIO channel.\nIndicates the DIO channel is used by a simulated device.\nConfigures the duty-cycle of the PWM generator.\nConfigures which DO channel the PWM signal is output on.\nConfigures the digital PWM to be a PPS signal with …\nChanges the frequency of the DO PWM generator.\nSets the distance traveled per encoder pulse. This is used …\nSets the source for an index pulse on the encoder.\nSets the maximum period where the device is still …\nSets the minimum rate to be considered moving by the …\nSets if to reverse the direction of the encoder.\nSets the number of encoder samples to average when …\nIndicates the encoder is used by a simulated device.\nSets the filter period for the specified filter index.\nWrites the filter index from the FPGA.\nSets the edges to trigger the interrupt on.\nSet joystick outputs.\nSets up the system to run the provided main loop in the …\nSets the name of a notifier.\nSets the HAL notifier thread priority.\nSets the PWM output to be a continuous high signal while …\nSets the configuration settings for the PWM channel.\nSets a PWM channel to be disabled.\nSets if the FPGA should output the center value if the …\nSets how how often the PWM signal is squelched, thus …\nSets a PWM channel to the desired position value.\nSets a PWM channel to the desired pulse width in …\nSets a PWM channel to the desired scaled value.\nSet the print function used by HAL_SendError\nSet the state of the “Radio” LED. @param state The …\nSets the state of a relay output.\nSets the data to be transmitted to the device to initiate …\nSets the CS Active high for a SPI port.\nSets the CS Active low for a SPI port.\nSets the stored handle for a SPI port.\nSets the SPI Mode.\nSets the clock speed for the SPI bus.\nSets the baud rate of a serial port.\nSets the number of data bits on a serial port.\nSets the flow control mode of a serial port.\nSets the number of parity bits on a serial port.\nSets the size of the read buffer.\nSets the number of stop bits on a serial port.\nSets the minimum serial read timeout of a port.\nSets the size of the write buffer.\nSets the write mode on a serial port.\nSets a simulated value.\nSets the thread priority for the specified thread.\nEnables or disables the 3V3 rail.\nEnables or disables the 5V rail.\nEnables or disables the 6V rail.\nSets up an analog gyro with the proper offsets and …\nCall this to shut down HAL.\nCalls registered SimPeriodic “after” callbacks (only …\nCalls registered SimPeriodic “before” callbacks (only …\nDirection of a simulated value (from the perspective of …\n&lt; bidirectional between user code and simulator\n&lt; input to user code from the simulator\n&lt; output from user code to the simulator\nSets the period for automatic SPI accumulation.\nStarts the auto SPI accumulator on a specific trigger.\nStops a repeating packet with a specific ID.\nStops a notifier from running.\nStops an automatic SPI accumulation.\nGeneric I2C read/write transaction.\nPerforms an SPI send/receive transaction.\nHAL data types.\nUpdates the trigger time for a notifier.\nHAL Entry Value.  Note this is a typed union.\nWaits for the defined interrupt to occur.\nWaits for any interrupt covered by the mask to occur.\nWaits for the next alarm for the specific notifier.\nWrites a packet to the CAN device with a specific ID.\nWrites a repeating packet to the CAN device with a …\nWrites an RTR frame of the specified length to the CAN …\nExecutes a write transaction with the device.\nExecutes a write transaction with the device.\nWrites data to the serial port.\n@defgroup hal_threads Threads Functions @ingroup hal_capi …\nCreates an event.  Events have binary state (signaled or …\nCreates a semaphore.  Semaphores keep an internal counter. …\nSets up signaling for an arbitrary handle.  With this …\nDestroys an event.  Destruction wakes up any waiters.\nDestroys a semaphore.  Destruction wakes up any waiters.\nCleans up signaling for a handle.  Destruction wakes up …\nAn event handle.\nGeneric handle for all WPI handle-based interfaces.\nReleases N counts of a semaphore.\nSets an event to non-signaled state.\nSets a handle to non-signaled state.\nA semaphore handle.\nSets an event to signaled state.\nSets a handle to signaled state.\nWaits for an handle to be signaled.\nWaits for an handle to be signaled, with timeout.\nWaits for one or more handles to be signaled.\nWaits for one or more handles to be signaled, with timeout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")