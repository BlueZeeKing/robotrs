searchState.loadedDescShard("math", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstrain an angle to 0 and 2 pi. All angles are in radians\nModify the angles a and b so that they are as close as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait that takes in a the requested robot speeds and …\nAn implementation of the <code>Kinematics</code> trait for a swerve …\nThe state of an individual swerve module.\nThe angle of the module in radians\nALign the wheels in an X to prevent the robot from moving.\nThe speed or displacment of the module in m/s or m\nConvert from drive train state to robot speeds\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert from robot speeds to drive train state\nCalculates the positions of the modules on the robot given …\nCreates a new <code>SwerveKinematics</code> struct with the given …\nOptimize the module state to prevent the module from …\nRescale the speeds of each module to not be higher than …\nStop the module from moving\nThis object calculates the robots positon over time by …\nReturns the argument unchanged.\nReturn the current pose as x, y, rotation\nCalls <code>U::from(self)</code>.\nSet the current pose as x, y, rotation\nThe state in this case should represent displacement not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")