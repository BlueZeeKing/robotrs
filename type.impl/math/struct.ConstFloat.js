(function() {
    var type_impls = Object.fromEntries([["math",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#110-118\">source</a><a href=\"#impl-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#111-113\">source</a><h4 class=\"code-header\">pub const fn <a href=\"math/struct.ConstFloat.html#tymethod.new\" class=\"fn\">new</a>(val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; Self</h4></section><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#115-117\">source</a><h4 class=\"code-header\">pub const fn <a href=\"math/struct.ConstFloat.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></div></details>",0,"math::Gain"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#impl-PartialEq-for-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","math::Gain"],["<section id=\"impl-ConstParamTy_-for-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#impl-ConstParamTy_-for-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.ConstParamTy_.html\" title=\"trait core::marker::ConstParamTy_\">ConstParamTy_</a> for <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section>","ConstParamTy_","math::Gain"],["<section id=\"impl-Eq-for-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#impl-Eq-for-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section>","Eq","math::Gain"],["<section id=\"impl-StructuralPartialEq-for-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#impl-StructuralPartialEq-for-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section>","StructuralPartialEq","math::Gain"],["<section id=\"impl-UnsizedConstParamTy-for-ConstFloat\" class=\"impl\"><a class=\"src rightside\" href=\"src/math/lib.rs.html#107\">source</a><a href=\"#impl-UnsizedConstParamTy-for-ConstFloat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.UnsizedConstParamTy.html\" title=\"trait core::marker::UnsizedConstParamTy\">UnsizedConstParamTy</a> for <a class=\"struct\" href=\"math/struct.ConstFloat.html\" title=\"struct math::ConstFloat\">ConstFloat</a></h3></section>","UnsizedConstParamTy","math::Gain"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5739]}